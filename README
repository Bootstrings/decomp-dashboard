## PROJECT OVERVIEW

This project is an Electron-based desktop application designed to streamline the workflow for contributing to the `melee` game decompilation project. It serves as a helper tool that guides a developer through the entire process, from initial environment setup to local verification and final submission.

The dashboard simplifies complex command-line tasks into a user-friendly graphical interface.

**Core Features:**

*   **Guided Setup:** Automates the process of cloning the `melee` repository, locating a `main.dol` file, configuring the project with `configure.py`, and running the initial `ninja` build.
*   **Persistent Paths:** Remembers the user's selected Project Folder and `main.dol` path between sessions for convenience.
*   **Toolchain Verification:** Automatically detects if Git and Python are installed and configured on the system's `PATH`. The tool can also install `ninja` via pip if it's missing.
*   **Manual Configuration:** Provides a settings page to manually specify paths for `git.exe`, `python.exe`, and `ninja.exe`, overriding auto-detection for non-standard environments. Found paths are displayed for user verification.
*   **Reconnaissance View:** Scans the project's assembly files to identify "vacant" (un-decompiled) and "claimed" (decompiled) functions, helping users quickly find a target to work on.
*   **Decompilation Helper:** For a selected function, it automatically extracts the relevant assembly code and C header context, ready to be copied into [decomp.me](https://decomp.me).
*   **Intelligent Code Injection:** Allows users to paste their matched C code. The application intelligently finds and replaces the corresponding function stub in both the C source file and the header file, preventing common redeclaration errors.
*   **One-Click Revert:** A dedicated button to revert any code injections for the currently selected file. This uses `git restore` to safely return the source files to their original, unmodified state.
*   **Local Verification & Submission:** Provides one-click buttons to run `ninja` to verify a local build and to pre-fill a GitHub issue for submitting a matched function.
*   **Quick Access Links:** Persistent icons on the dashboard provide one-click access to the Melee Decompilation GitHub repository and the decomp.me website.

## FILE STRUCTURE

```
decomp-dashboard/
├── src/
│   ├── index.html
│   └── preload.js
├── .gitignore
├── LICENSE
├── main.js
├── package.json
├── package-lock.json
└── README.md
```

## GETTING STARTED

Follow these instructions to get a copy of the project up and running on your local machine for development and testing purposes.

### Prerequisites

*   [Node.js](https://nodejs.org/) and npm
*   [Git](https://git-scm.com/)
*   [Python](https://www.python.org/)

### Installation

1.  Clone the repository to your local machine:
    ```sh
    git clone <YOUR_REPOSITORY_URL>
    cd decomp-dashboard
    ```

2.  Install the required npm packages:
    ```sh
    npm install
    ```
    This will install all necessary dependencies listed in `package.json`.

### Running the Application

To start the application in development mode, run the following command:

```sh
npm start
```

This will launch the Electron window and the application.

## ENVIRONMENT VARIABLES

This application uses `electron-store` to persistently save user settings, eliminating the need for a `.env` file. Configuration is handled automatically and can be manually overridden via the application's Settings page.

## KEY PACKAGES

*   **`electron`** (dev dependency): The core framework used to build this cross-platform desktop application. It must be in `devDependencies` to ensure it is not bundled into the final distributable application.
*   **`electron-store@7`**: Used to persistently store user settings, such as manually configured paths for the toolchain and last-used project paths. Version 7 is used for compatibility with the project's CommonJS module system.
*   **`electron-builder`** (dev dependency): A tool for packaging and distributing the Electron application as an executable file (e.g., `.exe`, `.dmg`).
*   **Node.js `child_process`**: Used to execute external command-line tools like `git`, `py`, and `ninja`.
*   **Node.js `fs` and `path`**: Used for all file system interactions.

## SECURITY NOTES

Security is a primary consideration, especially in an application that interacts with the file system and executes shell commands.

*   **Context Isolation**: The application is configured with `contextIsolation: true` and `nodeIntegration: false`. This is a critical security measure in Electron that ensures the renderer process (the UI) cannot directly access Node.js APIs.
*   **Preload Script**: Communication between the UI and the backend is handled exclusively through a `preload.js` script, which uses `contextBridge` to securely expose specific backend functions to the UI.
*   **Command Execution**: The application executes shell commands based on hardcoded templates. Any user-provided data (like file paths) is supplied via secure system dialogs, mitigating the risk of command injection attacks.

## DEPLOYMENT NOTES

To package this Electron application into a distributable format (e.g., `.exe` for Windows), use the `build` script in `package.json`.

1.  Ensure all dependencies are correctly installed by running `npm install`.
2.  Confirm that the `electron` package is listed under `devDependencies` in `package.json`, not `dependencies`.
3.  Run the build process:
    ```sh
    npm run build
    ```
    This will generate a `dist/` folder containing the packaged application. On Windows, you may need to run this command from a terminal with **Administrator privileges** to avoid errors related to creating symbolic links.

## TESTING

Currently, no formal tests have been written for this project. For a production-ready application, you should consider adding both unit and end-to-end tests.

Manual testing should be performed on core features after any change, including:
*   Verifying that the "Inject Code" button correctly replaces function stubs in both `.c` and `.h` files.
*   Confirming that the "Revert Changes" button restores the `.c` and `.h` files to their state before injection.